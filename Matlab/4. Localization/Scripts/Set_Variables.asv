% simulation time
t = struct( ...
    'start', 0, ...
    'final', 50, ...
    'ts', 0.01, ...
    'time', 0, ...
    'length', 0);

t.time = t.start:t.ts:t.final-t.ts;
t.length = length(t.time);

% inital value
dim_xy = 2; % demension
f1_init_pos = [2, 3]'; %[m, m] target initial position
f2_init_pos = [5, 5]'; %[m, m] robot initial position

L = struct('D', 0, ...
    'zeta1', 0, ... % could be arbitary scalar
    'zeta2', zeros(dim_xy,1), ...
    'zeta1_dot', 0, ...
    'zeta2_dot', zeros(dim_xy,1), ...
    'z_real', 0, ...
    'phi_real', zeros(dim_xy,1), ...
    'z_filtered', 0, ...
    'phi_filtered', zeros(dim_xy,1), ...
    'z_hat', 0, ...
    'x_hat', zeros(dim_xy,1), ...
    'x_hat_dot', zeros(dim_xy,1), ...
    'alpha', 1, ... % state filter constant
    'gamma', 1, ... % adaptive law constant
    'pe_amp', 0.22/sqrt(2), ...
    'pe_freq', 0.2, ...
    'tol_cnt', 0, ...
    'TOL_TIME', 180);

cur_zv = 0;
pre_zv = 0;

L.D = norm(f1_init_pos - f2_init_pos); % distance bewteen target and robot

f1_pos = f1_init_pos;
f2_pos = f2_init_pos;
f1_pre = f1_pos;
f1_cur = zeros(dim_xy , 1);


pre_zv = norm(f1_pos)^2 - L.D^2;
cur_zv = 0;

ps = zeros(dim_xy, 1); % persistent exciting signal

% buffer
buf_L = struct('D', zeros(1, t.length), ...
    'zeta1', zeros(1, t.length), ... % could be arbitary scalar
    'zeta2', zeros(dim_xy, t.length), ...
    'zeta1_dot', zeros(1, t.length), ...
    'zeta2_dot', zeros(dim_xy, t.length), ...
    'z_filtered', zeros(1, t.length), ...
    'phi_filtered', zeros(dim_xy, t.length), ...
    'z_hat', zeros(1, t.length), ...
    'x_hat', zeros(dim_xy, t.length), ...
    'x_hat_dot', zeros(dim_xy, t.length), ...
    'z_real', zeros(1, t.length), ...
    'phi_real', zeros(dim_xy, t.length));

buf_y_pos = zeros(dim_xy, t.length);
buf_ps = zeros(dim_xy, t.length);